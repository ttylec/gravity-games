Elm.Automaton = Elm.Automaton || {};
Elm.Automaton.make = function (_elm) {
   "use strict";
   _elm.Automaton = _elm.Automaton || {};
   if (_elm.Automaton.values) return _elm.Automaton.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm);
   var _op = {};
   var dequeue = function (q) {
      dequeue: while (true) {
         var _p0 = q;
         if (_p0._1.ctor === "[]") {
               if (_p0._0.ctor === "[]") {
                     return $Maybe.Nothing;
                  } else {
                     var _v1 = {ctor: "_Tuple2",_0: _U.list([]),_1: $List.reverse(_p0._0)};
                     q = _v1;
                     continue dequeue;
                  }
            } else {
               return $Maybe.Just({ctor: "_Tuple2",_0: _p0._1._0,_1: {ctor: "_Tuple2",_0: _p0._0,_1: _p0._1._1}});
            }
      }
   };
   var enqueue = F2(function (x,_p1) {    var _p2 = _p1;return {ctor: "_Tuple2",_0: A2($List._op["::"],x,_p2._0),_1: _p2._1};});
   var empty = {ctor: "_Tuple2",_0: _U.list([]),_1: _U.list([])};
   var step = F2(function (a,_p3) {    var _p4 = _p3;return _p4._0(a);});
   var run = F3(function (auto,base,inputs) {
      var step = F2(function (a,_p5) {    var _p6 = _p5;return _p6._0._0(a);});
      return A2($Signal.map,function (_p7) {    var _p8 = _p7;return _p8._1;},A3($Signal.foldp,step,{ctor: "_Tuple2",_0: auto,_1: base},inputs));
   });
   var Step = function (a) {    return {ctor: "Step",_0: a};};
   _op[">>>"] = F2(function (f,g) {
      return Step(function (a) {
         var _p9 = A2(step,a,f);
         var f$ = _p9._0;
         var b = _p9._1;
         var _p10 = A2(step,b,g);
         var g$ = _p10._0;
         var c = _p10._1;
         return {ctor: "_Tuple2",_0: A2(_op[">>>"],f$,g$),_1: c};
      });
   });
   _op["<<<"] = F2(function (g,f) {
      return Step(function (a) {
         var _p11 = A2(step,a,f);
         var f$ = _p11._0;
         var b = _p11._1;
         var _p12 = A2(step,b,g);
         var g$ = _p12._0;
         var c = _p12._1;
         return {ctor: "_Tuple2",_0: A2(_op["<<<"],g$,f$),_1: c};
      });
   });
   var branch = F2(function (f,g) {
      return Step(function (a) {
         var _p13 = A2(step,a,g);
         var g$ = _p13._0;
         var c = _p13._1;
         var _p14 = A2(step,a,f);
         var f$ = _p14._0;
         var b = _p14._1;
         return {ctor: "_Tuple2",_0: A2(branch,f$,g$),_1: {ctor: "_Tuple2",_0: b,_1: c}};
      });
   });
   var pair = F2(function (f,g) {
      return Step(function (_p15) {
         var _p16 = _p15;
         var _p17 = A2(step,_p16._1,g);
         var g$ = _p17._0;
         var d = _p17._1;
         var _p18 = A2(step,_p16._0,f);
         var f$ = _p18._0;
         var c = _p18._1;
         return {ctor: "_Tuple2",_0: A2(pair,f$,g$),_1: {ctor: "_Tuple2",_0: c,_1: d}};
      });
   });
   var first = function (auto) {
      return Step(function (_p19) {
         var _p20 = _p19;
         var _p21 = A2(step,_p20._0,auto);
         var f = _p21._0;
         var o = _p21._1;
         return {ctor: "_Tuple2",_0: first(f),_1: {ctor: "_Tuple2",_0: o,_1: _p20._1}};
      });
   };
   var second = function (auto) {
      return Step(function (_p22) {
         var _p23 = _p22;
         var _p24 = A2(step,_p23._1,auto);
         var f = _p24._0;
         var o = _p24._1;
         return {ctor: "_Tuple2",_0: second(f),_1: {ctor: "_Tuple2",_0: _p23._0,_1: o}};
      });
   };
   var loop = F2(function (state,auto) {
      return Step(function (input) {
         var _p25 = A2(step,{ctor: "_Tuple2",_0: input,_1: state},auto);
         var auto$ = _p25._0;
         var output = _p25._1._0;
         var state$ = _p25._1._1;
         return {ctor: "_Tuple2",_0: A2(loop,state$,auto$),_1: output};
      });
   });
   var combine = function (autos) {
      return Step(function (a) {
         var _p26 = $List.unzip(A2($List.map,step(a),autos));
         var autos$ = _p26._0;
         var bs = _p26._1;
         return {ctor: "_Tuple2",_0: combine(autos$),_1: bs};
      });
   };
   var pure = function (f) {    return Step(function (x) {    return {ctor: "_Tuple2",_0: pure(f),_1: f(x)};});};
   var merge = function (f) {    return pure($Basics.uncurry(f));};
   var state = F2(function (s,f) {    return Step(function (x) {    var s$ = A2(f,x,s);return {ctor: "_Tuple2",_0: A2(state,s$,f),_1: s$};});});
   var count = A2(state,0,F2(function (_p27,c) {    return c + 1;}));
   var hiddenState = F2(function (s,f) {
      return Step(function (x) {    var _p28 = A2(f,x,s);var s$ = _p28._0;var out = _p28._1;return {ctor: "_Tuple2",_0: A2(hiddenState,out,f),_1: s$};});
   });
   var average = function (k) {
      var stepFull = F2(function (n,_p29) {
         var _p30 = _p29;
         var _p34 = _p30._2;
         var _p33 = _p30._0;
         var _p32 = _p30._1;
         var _p31 = dequeue(_p33);
         if (_p31.ctor === "Nothing") {
               return {ctor: "_Tuple2",_0: 0,_1: {ctor: "_Tuple3",_0: _p33,_1: _p32,_2: _p34}};
            } else {
               var sum$ = _p34 + n - _p31._0._0;
               return {ctor: "_Tuple2",_0: sum$ / $Basics.toFloat(_p32),_1: {ctor: "_Tuple3",_0: A2(enqueue,n,_p31._0._1),_1: _p32,_2: sum$}};
            }
      });
      var step = F2(function (n,_p35) {
         var _p36 = _p35;
         var _p39 = _p36._2;
         var _p38 = _p36._0;
         var _p37 = _p36._1;
         return _U.eq(_p37,k) ? A2(stepFull,n,{ctor: "_Tuple3",_0: _p38,_1: _p37,_2: _p39}) : {ctor: "_Tuple2"
                                                                                              ,_0: (_p39 + n) / ($Basics.toFloat(_p37) + 1)
                                                                                              ,_1: {ctor: "_Tuple3"
                                                                                                   ,_0: A2(enqueue,n,_p38)
                                                                                                   ,_1: _p37 + 1
                                                                                                   ,_2: _p39 + n}};
      });
      return A2(hiddenState,{ctor: "_Tuple3",_0: empty,_1: 0,_2: 0},step);
   };
   return _elm.Automaton.values = {_op: _op
                                  ,pure: pure
                                  ,state: state
                                  ,hiddenState: hiddenState
                                  ,run: run
                                  ,step: step
                                  ,branch: branch
                                  ,pair: pair
                                  ,merge: merge
                                  ,first: first
                                  ,second: second
                                  ,combine: combine
                                  ,loop: loop
                                  ,count: count
                                  ,average: average};
};