Elm.Shooter = Elm.Shooter || {};
Elm.Shooter.make = function (_elm) {
   "use strict";
   _elm.Shooter = _elm.Shooter || {};
   if (_elm.Shooter.values) return _elm.Shooter.values;
   var _U = Elm.Native.Utils.make(_elm),
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Debug = Elm.Debug.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $SpaceSim = Elm.SpaceSim.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Vectors = Elm.Vectors.make(_elm),
   $Window = Elm.Window.make(_elm);
   var _op = {};
   var delta = A2($Signal.map,$Time.inSeconds,$Time.fps(35));
   var isHit = F2(function (ship,objects) {
      var hits = function (o) {    return _U.cmp($Vectors.norm(A2($Vectors._op[".-."],ship.position,o.position)),ship.size + o.size) < 1;};
      return A2($List.any,hits,objects);
   });
   var hudGreen = A3($Color.rgb,160,200,160);
   var viewScore = function (s) {
      return $Graphics$Collage.toForm($Graphics$Element.leftAligned(A2($Text.height,
      20,
      $Text.monospace(A2($Text.color,hudGreen,$Text.fromString($Basics.toString(s)))))));
   };
   var viewEnergy = function (ship) {
      var ls = _U.update($Graphics$Collage.defaultLine,{color: hudGreen,width: 10});
      return A2($Graphics$Collage.traced,ls,$Graphics$Collage.path(_U.list([{ctor: "_Tuple2",_0: 0,_1: 0},{ctor: "_Tuple2",_0: 0,_1: 10 * ship.energy}])));
   };
   var bulletRenderer = A2($Graphics$Collage.filled,$Color.white,A2($Graphics$Collage.oval,2,2));
   var shoot = function (ship) {
      var object = ship.object;
      var dx = A2($Vectors.Vector2D,object.size * $Basics.cos(object.orientation),object.size * $Basics.sin(object.orientation));
      return _U.update(object,{renderer: bulletRenderer,size: 0,color: $Color.white,position: A2($Vectors._op[".+."],object.position,dx)});
   };
   var destroyedRenderer = $Graphics$Collage.toForm(A3($Graphics$Element.fittedImage,15,15,"spaceship-destroyed.gif"));
   var drawShip = F2(function ($do,ship) {
      var object = ship.object;
      return ship.destroyed ? A2($SpaceSim.drawObject,$do,_U.update(object,{renderer: destroyedRenderer})) : A2($SpaceSim.drawObject,$do,object);
   });
   var shipPRenderer = $Graphics$Collage.toForm(A3($Graphics$Element.fittedImage,20,20,"spaceship-propelled.gif"));
   var shipRenderer = $Graphics$Collage.toForm(A3($Graphics$Element.fittedImage,15,15,"spaceship.gif"));
   var sunRenderer = $Graphics$Collage.toForm(A3($Graphics$Element.fittedImage,40,40,"sun.gif"));
   var sun = {renderer: sunRenderer
             ,size: 20
             ,orbit: {sma: 0,e: 0,omega: 0,meanL: 0}
             ,color: $Color.yellow
             ,position: A2($Vectors.Vector2D,0,0)
             ,velocity: A2($Vectors.Vector2D,0,0)
             ,orientation: 0};
   var au = 400;
   var elementsPlayer1 = {sma: 0.5 * au,e: 0.0,omega: $Basics.degrees(0),meanL: $Basics.degrees(10)};
   var elementsPlayer2 = {sma: 0.5 * au,e: 0.0,omega: $Basics.degrees(0),meanL: $Basics.degrees(190)};
   var startT = 40;
   var gm = 4 * Math.pow($Basics.pi,2) * Math.pow(au,3) / Math.pow(startT,2);
   var startShip1 = {object: A4($SpaceSim.objectFromElements,gm,shipRenderer,7.5,elementsPlayer1),destroyed: false,energy: 10,fuel: 100};
   var startShip2 = {object: A4($SpaceSim.objectFromElements,gm,shipRenderer,7.5,elementsPlayer2),destroyed: false,energy: 10,fuel: 100};
   var game = {ship1: startShip1,ship2: startShip2,score1: 0,score2: 0,bullets: _U.list([]),drawOrbits: false};
   var energyGain = 1;
   var bulletEnergy = 2;
   var bulletV = 100;
   var shootBullet = function (ship) {
      var canShoot = _U.cmp(ship.energy,bulletEnergy) > -1;
      var energy = canShoot ? ship.energy - bulletEnergy : ship.energy;
      var object = ship.object;
      var dx = A2($Vectors.Vector2D,object.size * $Basics.cos(object.orientation),object.size * $Basics.sin(object.orientation));
      var dv = A2($Vectors.Vector2D,bulletV * $Basics.cos(object.orientation),bulletV * $Basics.sin(object.orientation));
      var bullet = canShoot ? _U.list([_U.update(object,
      {renderer: bulletRenderer
      ,size: 0
      ,color: $Color.white
      ,position: A2($Vectors._op[".+."],object.position,dx)
      ,velocity: A2($Vectors._op[".+."],object.velocity,dv)})]) : _U.list([]);
      return {ctor: "_Tuple2",_0: _U.update(ship,{energy: energy}),_1: bullet};
   };
   var accel = 100;
   var rotationSpeed = -1.0 * $Basics.degrees(180);
   var updateShip = F3(function (_p0,dt,ship) {
      var _p1 = _p0;
      var _p2 = _p1._1;
      var rot = rotationSpeed * $Basics.toFloat(_p1._0);
      var energy = ship.energy + dt * energyGain;
      var thurst = _U.cmp(_p2,0) > 0 ? accel * $Basics.toFloat(_p2) : 0;
      var object = A5($SpaceSim.updateObject,gm,dt,rot,thurst,ship.object);
      return _U.update(ship,
      {object: _U.update(object,{renderer: _U.cmp(_p2,0) > 0 ? shipPRenderer : shipRenderer}),energy: _U.cmp(energy,10) > -1 ? 10 : energy});
   });
   var gameHeight = 600;
   var gameWidth = 800;
   var view = F2(function (_p3,game) {
      var _p4 = _p3;
      var scores = _U.list([A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: (0 - gameWidth) / 2 + 10,_1: (0 - gameHeight) / 2 + 130},viewScore(game.score2))
                           ,A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: gameWidth / 2 - 10,_1: (0 - gameHeight) / 2 + 130},viewScore(game.score1))]);
      var energies = _U.list([A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: (0 - gameWidth) / 2 + 10,_1: (0 - gameHeight) / 2 + 10},viewEnergy(game.ship2))
                             ,A2($Graphics$Collage.move,{ctor: "_Tuple2",_0: gameWidth / 2 - 10,_1: (0 - gameHeight) / 2 + 10},viewEnergy(game.ship1))]);
      var ship2 = _U.list([A2(drawShip,game.drawOrbits,game.ship2)]);
      var ship1 = _U.list([A2(drawShip,game.drawOrbits,game.ship1)]);
      var bullets = A2($List.map,$SpaceSim.drawObject(game.drawOrbits),game.bullets);
      var $static = _U.list([A2($Graphics$Collage.filled,$Color.black,A2($Graphics$Collage.rect,gameWidth,gameHeight)),A2($SpaceSim.drawObject,false,sun)]);
      return A4($Graphics$Element.container,
      _p4._0,
      _p4._1,
      $Graphics$Element.middle,
      A3($Graphics$Collage.collage,gameWidth,gameHeight,$List.concat(_U.list([$static,bullets,ship1,ship2,energies,scores]))));
   });
   var inGameField = function (object) {
      var y = $Vectors.ycomp(object.position);
      var x = $Vectors.xcomp(object.position);
      var r = $Basics.sqrt(A2($Vectors._op[".*."],object.position,object.position));
      return _U.cmp(r,20) > 0 && (_U.cmp(x,(0 - gameWidth) / 2) > 0 && (_U.cmp(x,gameWidth / 2) < 0 && (_U.cmp(y,(0 - gameHeight) / 2) > 0 && _U.cmp(y,
      gameHeight / 2) < 0)));
   };
   var updateSimulation = F4(function (player1,player2,dt,game) {
      var bullets = A2($List.filter,inGameField,A2($List.map,A4($SpaceSim.updateObject,gm,dt,0,0),game.bullets));
      var ship2 = A3(updateShip,{ctor: "_Tuple2",_0: player2.x,_1: player2.y},dt,game.ship2);
      var ship1 = A3(updateShip,{ctor: "_Tuple2",_0: player1.x,_1: player1.y},dt,game.ship1);
      var hit1 = $Basics.not(inGameField(ship1.object)) || A2(isHit,ship1.object,A2($List._op["::"],ship2.object,bullets));
      var hit2 = $Basics.not(inGameField(ship2.object)) || A2(isHit,ship2.object,A2($List._op["::"],ship1.object,bullets));
      return _U.update(game,
      {ship1: _U.update(ship1,{destroyed: hit1 || ship1.destroyed})
      ,ship2: _U.update(ship2,{destroyed: hit2 || ship2.destroyed})
      ,score1: hit2 ? game.score1 + 1 : game.score1
      ,score2: hit1 ? game.score2 + 1 : game.score2
      ,bullets: bullets});
   });
   var update = F2(function (input,game) {
      var destroyed = game.ship1.destroyed || game.ship2.destroyed;
      var _p5 = input;
      switch (_p5.ctor)
      {case "Simulation": return destroyed ? game : A4(updateSimulation,_p5._0,_p5._1,_p5._2,game);
         case "Shoot": var _p9 = _p5._1;
           var _p8 = _p5._0;
           var _p6 = _p9 ? shootBullet(game.ship2) : {ctor: "_Tuple2",_0: game.ship2,_1: _U.list([])};
           var ship2 = _p6._0;
           var b2 = _p6._1;
           var _p7 = _p8 ? shootBullet(game.ship1) : {ctor: "_Tuple2",_0: game.ship1,_1: _U.list([])};
           var ship1 = _p7._0;
           var b1 = _p7._1;
           var u = A2($Debug.watch,"p2",_p9);
           var t = A2($Debug.watch,"p1",_p8);
           return _U.update(game,{bullets: $List.concat(_U.list([b1,b2,game.bullets])),ship1: ship1,ship2: ship2});
         case "ToggleOrbits": return _U.update(game,{drawOrbits: _p5._0 ? $Basics.not(game.drawOrbits) : game.drawOrbits});
         default: return _p5._0 && destroyed ? _U.update(game,{ship1: startShip1,ship2: startShip2,bullets: _U.list([])}) : game;}
   });
   var Restart = function (a) {    return {ctor: "Restart",_0: a};};
   var ToggleOrbits = function (a) {    return {ctor: "ToggleOrbits",_0: a};};
   var Shoot = F2(function (a,b) {    return {ctor: "Shoot",_0: a,_1: b};});
   var shotInput = A2($Signal.merge,
   A2($Signal.map,function (x) {    return A2(Shoot,x,false);},$Keyboard.isDown(40)),
   A2($Signal.map,function (x) {    return A2(Shoot,false,x);},$Keyboard.isDown(83)));
   var Simulation = F3(function (a,b,c) {    return {ctor: "Simulation",_0: a,_1: b,_2: c};});
   var simInput = A2($Signal.sampleOn,delta,A4($Signal.map3,Simulation,$Keyboard.arrows,$Keyboard.wasd,delta));
   var input = $Signal.mergeMany(_U.list([A2($Signal.map,ToggleOrbits,$Keyboard.isDown(79)),A2($Signal.map,Restart,$Keyboard.isDown(32)),shotInput,simInput]));
   var gameState = A3($Signal.foldp,update,game,input);
   var main = A3($Signal.map2,view,$Window.dimensions,gameState);
   var Action = F2(function (a,b) {    return {x: a,y: b};});
   var Game = F6(function (a,b,c,d,e,f) {    return {ship1: a,ship2: b,score1: c,score2: d,bullets: e,drawOrbits: f};});
   var Ship = F4(function (a,b,c,d) {    return {object: a,destroyed: b,energy: c,fuel: d};});
   return _elm.Shooter.values = {_op: _op,main: main};
};